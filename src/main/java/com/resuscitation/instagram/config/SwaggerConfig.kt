package com.resuscitation.instagram.config


import com.resuscitation.instagram.config.data.GitProperties
import io.swagger.v3.oas.models.Components
import io.swagger.v3.oas.models.OpenAPI
import io.swagger.v3.oas.models.info.Contact
import io.swagger.v3.oas.models.info.Info
import io.swagger.v3.oas.models.info.License
import io.swagger.v3.oas.models.security.SecurityScheme
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration

@Configuration
class SwaggerConfig(
    private val gitProperties: GitProperties
) {
    @Bean
    fun openAPI(): OpenAPI {
        return OpenAPI().components(
            Components().apply {
                securitySchemes(
                    mapOf(
                        BEARER_AUTH to securityScheme(),
                    ),
                )
            }).info(info())
    }

    /**
     * Bearer Auth Security Scheme
     */
    private fun securityScheme(): SecurityScheme {
        return SecurityScheme()
            .type(SecurityScheme.Type.HTTP)
            .description("Auth API를 통해 발급받은 Bearer Token을 입력해주세요")
            .scheme("bearer")
            .bearerFormat("JWT")
    }

    /**
     * OpenAPI Info
     */
    private fun info(): Info {
        return Info().apply {
            title = "instagram clone server API"
            description = """<h3>instagram clone server API Documentation</h3>
                |<p>You can See Full Source Code at <a href="${gitProperties.remote.origin.url}">GitHub Repository</a></p>
                |<p>API Document is generated by Swagger</p>
                |<h4>Last Commit Information</h4>
                |<p><strong>Message:</strong> ${gitProperties.commit.message.full}</p>
                |<p><strong>Commit ID:</strong> ${gitProperties.commit.id}</p>
                |<p><strong>Commit Time:</strong> ${gitProperties.commit.time}</p>
                |<p><strong>Committed by:</strong> ${gitProperties.commit.user.name} (${gitProperties.commit.user.email})</p>
            """.trimMargin()
            termsOfService = ""
            contact = Contact().apply {
                name = "Yooun Chaemin"
                email = "cinnamein@gmail.com"
            }
            license = License().apply {
                name = "MIT License"
                url = "https://opensource.org/licenses/MIT"
            }
            version = gitProperties.build.version
        }
    }

    companion object {
        const val BEARER_AUTH: String = "JSON Web Token (JWT)"
    }
}

